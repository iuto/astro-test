---
// .astro ファイルの最初にメタデータとスクリプトを置きます
import { format } from 'date-fns';
import Header from '../layouts/Header.astro';
import '../styles/global.css';

// すでに allPosts を宣言しているので、この行は削除します。
// const allPosts = await Astro.glob('../pages/posts/*.md');

const allPosts = await Astro.glob('../pages/posts/*.md');

// 投稿の pubDate をフォーマットする関数
function formatPubDate(date: string) {
  return format(new Date(date), 'yyyy-MM-dd');
}

// allPosts の各記事に対してフォーマットを適用します
const formattedPosts = allPosts.map(post => ({
  ...post,
  frontmatter: {
    ...post.frontmatter,
    title: post.frontmatter.title || 'No title',
    image: post.frontmatter.image || '/path/to/default/image.jpg',
    pubDate: formatPubDate(post.frontmatter.pubDate),
    tags: post.frontmatter.tags || [] // tagsが存在しない場合は空の配列を使用
  }
}));

// 日付で降順にソート
formattedPosts.sort((a, b) => new Date(b.frontmatter.pubDate).getTime() - new Date(a.frontmatter.pubDate).getTime());

// ユニークなタグのリストを作成
const tags = Array.from(new Set(allPosts.flatMap(post => post.frontmatter.tags)));

// カテゴリー（タグ）選択状態を管理する変数
let selectedTag = 'すべて';

// 選択されたカテゴリーに基づいてフィルタリングされた投稿
const filteredPosts = selectedTag === 'すべて' ? formattedPosts : formattedPosts.filter(post => post.frontmatter.tags.includes(selectedTag));

const categoryImages: Record<string, string> = {
  "プログラミング": "/images/icon/pc.webp",
  "仕事": "/images/icon/office.webp",
  "考えたこと": "/images/icon/balloon.webp",
  "日常": "/images/icon/smiling.webp",
};

// ユニークなタグのリストを作成
const uniqueTags = Array.from(new Set(allPosts.flatMap(post => post.frontmatter.tags)));

// カテゴリー順序を定義
const categoryOrder = ['プログラミング', '仕事', '考えたこと', '日常', 'その他'];

// タグをカテゴリー順序に基づいて並べる
const sortedTags = categoryOrder.filter(tag => uniqueTags.includes(tag));

---

<!DOCTYPE html>
<html lang="ja">
  <head>
    <title>iuto.work</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" href="/images/favicon.ico">
    <meta name="description" content="いうとのポートフォリオサイトです。">
    <meta property="og:image" content="https://www.iuto.work/images/ogp.webp" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@800&display=swap" rel="stylesheet">
  </head>
    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-Z5S7NX0CXN"></script>
<body class="justify-center 2xl:w-1/2 sm:w-5/6 mx-auto mb-20 dark:bg-gray-800 p-4">
    <Header active="blog" />

    <div class="flex flex-wrap justify-center mt-5">
      <button class="category-button flex items-center justify-center w-14 h-14 text-gray-900 bg-white border border-gray-300 focus:outline-none hover:bg-gray-100 focus:ring-0 font-medium rounded-lg text-sm p-2 mb-2 mr-2 dark:bg-gray-800 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-600 dark:focus:ring-gray-700" data-category="すべて">
        <img src="/images/icon/all.webp" alt="すべて" class="m-auto shadow-none" />
      </button>
      {sortedTags.map(tag => (
        <button class="category-button flex items-center justify-center w-14 h-14 text-gray-900 bg-white border border-gray-300 focus:outline-none hover:bg-gray-100 focus:ring-0 font-medium rounded-lg text-sm p-2 mb-2 mr-2 dark:bg-gray-800 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-600 dark:focus:ring-gray-700" data-category={tag}>
          <img src={categoryImages[tag]} alt={tag} class="m-auto shadow-none" />
        </button>
      ))}
    </div>    
    
    <ul>
      {formattedPosts.map(post => (
        <li class="post" data-tags={post.frontmatter.tags.join(',')}>
          <a href={post.url} class="block w-full flex flex-col items-center">
            <div class="mt-5 flex items-center w-full max-w-xl p-6 text-gray-500 bg-white rounded-lg shadow-md dark:bg-gray-900 hover:bg-gray-200 dark:hover:bg-gray-700">
              <img src={post.frontmatter.image} class="w-10 h-10 text-blue-500 rounded-none shadow-none" alt="Post Image" />
              <div class="ml-3">
                <div class="font-bold text-base dark:text-gray-200">{post.frontmatter.title}</div>
                <div class="font-normal text-sm dark:text-gray-200">{post.frontmatter.pubDate}</div>
              </div>
            </div>
          </a>
        </li>
      ))}
    </ul>
        
    <script>
      function updatePostsDisplay(selectedTag: string | null) { // selectedTag が null である可能性を考慮
        const posts = document.querySelectorAll('.post');
        posts.forEach((postElement) => {
          const post = postElement as HTMLElement; // Element を HTMLElement にキャスト
          const postTagsString = post.dataset.tags || ''; // dataset.tags が undefined の場合に備えて空文字をデフォルト値とする
          const postTags = postTagsString.split(',');
    
          if (selectedTag === 'すべて' || postTags.includes(selectedTag || '')) { // selectedTag が null の場合に備えて空文字を使用
            post.style.display = '';
          } else {
            post.style.display = 'none';
          }
        });
      }
    
      document.addEventListener('DOMContentLoaded', () => {
        document.querySelectorAll('.category-button').forEach(buttonElement => {
          const button = buttonElement as HTMLElement; // Element を HTMLElement にキャスト
          button.addEventListener('click', () => {
            const selectedTag = button.getAttribute('data-category');
            updatePostsDisplay(selectedTag);
          });
        });
      });
    </script>
    
    
  </body>
</html>